/*
 * ForgeRaven build file.
 */

//================================================
// Variables
def mod_version = gradle.ext.fr_mod_version
def mc_ver = gradle.ext.fr_mc_ver
def forge_ver = gradle.ext.fr_forge_ver

//================================================
// Pre-execute

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        // Sonatype (for SpecialSource in 1.7+)
        maven {
            name = "Sonatype Nexus"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name 'Forge'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'

//================================================
// Dependencies and setup

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade 'net.kencochrane.raven:raven:5.0'
    shade 'net.kencochrane.raven:raven-log4j2:5.0'
}

//================================================
// Jar data

// Grab system env
def env = System.getenv()

group = "io.drakon"
version = mod_version
archivesBaseName = "ForgeRaven"

def in_jenkins = false
// Get Jenkins metadata
def jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()


if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

// Get Git metadata (if in Jenkins)
def gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

//================================================
// Source/Resource Processing and Compilation

// Setup Forge plugin
minecraft {
    version = mc_ver + "-" + forge_ver
}

//================================================
// Jar tasks

task sourceJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    // Grab deps for shading
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }

    // Merge Jenkins and Git manifests to form final manifest in final release jar
    manifest {
        from jenkinsManifest, gitManifest
    }
}

artifacts {
    archives sourceJar
    archives javadocJar
}

//================================================
// Maven deployment
apply plugin: 'maven'

if (!project.hasProperty("DEPLOY_DIR")) {
    ext.DEPLOY_DIR = null
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${DEPLOY_DIR}")
        }
    }
}

uploadArchives.onlyIf { return DEPLOY_DIR != null }
